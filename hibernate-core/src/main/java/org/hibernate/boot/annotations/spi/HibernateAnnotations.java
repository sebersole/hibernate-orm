/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html.
 */
package org.hibernate.boot.annotations.spi;

import java.util.function.Consumer;

import org.hibernate.annotations.*;
import org.hibernate.boot.annotations.internal.AnnotationDescriptorBuilder;

import static org.hibernate.boot.annotations.internal.AnnotationDescriptorBuilder.createDetails;

/**
 * Details about Hibernate annotations
 *
 * @author Steve Ebersole
 */
public interface HibernateAnnotations {
	AnnotationDescriptor<Any> ANY = createDetails( Any.class );
	AnnotationDescriptor<AnyDiscriminator> ANY_DISCRIMINATOR = createDetails( AnyDiscriminator.class );
	AnnotationDescriptor<AnyDiscriminatorValues> ANY_DISCRIMINATOR_VALUES = createDetails( AnyDiscriminatorValues.class );
	AnnotationDescriptor<AnyDiscriminatorValue> ANY_DISCRIMINATOR_VALUE = AnnotationDescriptorBuilder.createDetails( AnyDiscriminatorValue.class, ANY_DISCRIMINATOR_VALUES );
	AnnotationDescriptor<AnyKeyJavaClass> ANY_KEY_JAVA_CLASS = createDetails( AnyKeyJavaClass.class );
	AnnotationDescriptor<AnyKeyJavaType> ANY_KEY_JAVA_TYPE = createDetails( AnyKeyJavaType.class );
	AnnotationDescriptor<AnyKeyJdbcType> ANY_KEY_JDBC_TYPE = createDetails( AnyKeyJdbcType.class );
	AnnotationDescriptor<AnyKeyJdbcTypeCode> ANY_KEY_JDBC_TYPE_CODE = createDetails( AnyKeyJdbcTypeCode.class );
	AnnotationDescriptor<AttributeAccessor> ATTRIBUTE_ACCESSOR = createDetails( AttributeAccessor.class );
	AnnotationDescriptor<AttributeBinderType> ATTRIBUTE_BINDER_TYPE = createDetails( AttributeBinderType.class );
	AnnotationDescriptor<Bag> BAG = createDetails( Bag.class );
	AnnotationDescriptor<BatchSize> BATCH_SIZE = createDetails( BatchSize.class );
	AnnotationDescriptor<Cache> CACHE = createDetails( Cache.class );
	AnnotationDescriptor<Cascade> CASCADE = createDetails( Cascade.class );
	AnnotationDescriptor<Checks> CHECKS = createDetails( Checks.class );
	AnnotationDescriptor<Check> CHECK = AnnotationDescriptorBuilder.createDetails( Check.class, CHECKS );
	AnnotationDescriptor<CollectionId> COLLECTION_ID = createDetails( CollectionId.class );
	AnnotationDescriptor<CollectionIdJavaType> COLLECTION_ID_JAVA_TYPE = createDetails( CollectionIdJavaType.class );
	AnnotationDescriptor<CollectionIdJdbcType> COLLECTION_ID_JDBC_TYPE = createDetails( CollectionIdJdbcType.class );
	AnnotationDescriptor<CollectionIdJdbcTypeCode> COLLECTION_ID_JDBC_TYPE_CODE = createDetails( CollectionIdJdbcTypeCode.class );
	AnnotationDescriptor<CollectionIdMutability> COLLECTION_ID_MUTABILITY = createDetails( CollectionIdMutability.class );
	AnnotationDescriptor<CollectionIdType> COLLECTION_ID_TYPE = createDetails( CollectionIdType.class );
	AnnotationDescriptor<CollectionType> COLLECTION_TYPE = createDetails( CollectionType.class );
	AnnotationDescriptor<CollectionTypeRegistrations> COLLECTION_TYPE_REGS = createDetails( CollectionTypeRegistrations.class );
	AnnotationDescriptor<CollectionTypeRegistration> COLLECTION_TYPE_REG = AnnotationDescriptorBuilder.createDetails( CollectionTypeRegistration.class, COLLECTION_TYPE_REGS );
	AnnotationDescriptor<ColumnDefault> COLUMN_DEFAULT = createDetails( ColumnDefault.class );
	AnnotationDescriptor<ColumnTransformers> COLUMN_TRANSFORMERS = createDetails( ColumnTransformers.class );
	AnnotationDescriptor<ColumnTransformer> COLUMN_TRANSFORMER = AnnotationDescriptorBuilder.createDetails( ColumnTransformer.class, COLUMN_TRANSFORMERS );
	AnnotationDescriptor<Comment> COMMENT = createDetails( Comment.class );
	AnnotationDescriptor<CompositeType> COMPOSITE_TYPE = createDetails( CompositeType.class );
	AnnotationDescriptor<CompositeTypeRegistrations> COMPOSITE_TYPE_REGS = createDetails( CompositeTypeRegistrations.class );
	AnnotationDescriptor<CompositeTypeRegistration> COMPOSITE_TYPE_REG = AnnotationDescriptorBuilder.createDetails( CompositeTypeRegistration.class, COMPOSITE_TYPE_REGS );
	AnnotationDescriptor<ConverterRegistrations> CONVERTER_REGS = createDetails( ConverterRegistrations.class );
	AnnotationDescriptor<ConverterRegistration> CONVERTER_REG = AnnotationDescriptorBuilder.createDetails( ConverterRegistration.class, CONVERTER_REGS );
	AnnotationDescriptor<CreationTimestamp> CREATION_TIMESTAMP = createDetails( CreationTimestamp.class );
	AnnotationDescriptor<CurrentTimestamp> CURRENT_TIMESTAMP = createDetails( CurrentTimestamp.class );
	AnnotationDescriptor<DiscriminatorFormula> DISCRIMINATOR_FORMULA = createDetails( DiscriminatorFormula.class );
	AnnotationDescriptor<DiscriminatorOptions> DISCRIMINATOR_OPTIONS = createDetails( DiscriminatorOptions.class );
	AnnotationDescriptor<DynamicInsert> DYNAMIC_INSERT = createDetails( DynamicInsert.class );
	AnnotationDescriptor<DynamicUpdate> DYNAMIC_UPDATE = createDetails( DynamicUpdate.class );
	AnnotationDescriptor<EmbeddableInstantiator> EMBEDDABLE_INSTANTIATOR = createDetails( EmbeddableInstantiator.class );
	AnnotationDescriptor<EmbeddableInstantiatorRegistrations> EMBEDDABLE_INSTANTIATOR_REGS = createDetails( EmbeddableInstantiatorRegistrations.class );
	AnnotationDescriptor<EmbeddableInstantiatorRegistration> EMBEDDABLE_INSTANTIATOR_REG = AnnotationDescriptorBuilder.createDetails( EmbeddableInstantiatorRegistration.class, EMBEDDABLE_INSTANTIATOR_REGS );
	AnnotationDescriptor<Fetch> FETCH = createDetails( Fetch.class );
	AnnotationDescriptor<FetchProfiles> FETCH_PROFILES = createDetails( FetchProfiles.class );
	AnnotationDescriptor<FetchProfile> FETCH_PROFILE = AnnotationDescriptorBuilder.createDetails( FetchProfile.class, FETCH_PROFILES );
	AnnotationDescriptor<Filters> FILTERS = createDetails( Filters.class );
	AnnotationDescriptor<Filter> FILTER = AnnotationDescriptorBuilder.createDetails( Filter.class, FILTERS );
	AnnotationDescriptor<FilterDefs> FILTER_DEFS = createDetails( FilterDefs.class );
	AnnotationDescriptor<FilterDef> FILTER_DEF = AnnotationDescriptorBuilder.createDetails( FilterDef.class, FILTER_DEFS );
	AnnotationDescriptor<FilterJoinTables> FILTER_JOIN_TABLES = createDetails( FilterJoinTables.class );
	AnnotationDescriptor<FilterJoinTable> FILTER_JOIN_TABLE = AnnotationDescriptorBuilder.createDetails( FilterJoinTable.class, FILTER_JOIN_TABLES );
	AnnotationDescriptor<ForeignKey> FOREIGN_KEY = createDetails( ForeignKey.class );
	AnnotationDescriptor<Formula> FORMULA = createDetails( Formula.class );
	AnnotationDescriptor<Generated> GENERATED = createDetails( Generated.class );
	AnnotationDescriptor<GeneratedColumn> GENERATED_COLUMN = createDetails( GeneratedColumn.class );
	AnnotationDescriptor<GeneratorType> GENERATOR_TYPE = createDetails( GeneratorType.class );
	AnnotationDescriptor<GenericGenerators> GENERIC_GENERATORS = createDetails( GenericGenerators.class );
	AnnotationDescriptor<GenericGenerator> GENERIC_GENERATOR = AnnotationDescriptorBuilder.createDetails( GenericGenerator.class, GENERIC_GENERATORS );
	AnnotationDescriptor<IdGeneratorType> ID_GENERATOR_TYPE = createDetails( IdGeneratorType.class );
	AnnotationDescriptor<Immutable> IMMUTABLE = createDetails( Immutable.class );
	AnnotationDescriptor<Imported> IMPORTED = createDetails( Imported.class );
	AnnotationDescriptor<Index> INDEX = createDetails( Index.class );
	AnnotationDescriptor<IndexColumn> INDEX_COLUMN = createDetails( IndexColumn.class );
	AnnotationDescriptor<Instantiator> INSTANTIATOR = createDetails( Instantiator.class );
	AnnotationDescriptor<JavaType> JAVA_TYPE = createDetails( JavaType.class );
	AnnotationDescriptor<JavaTypeRegistrations> JAVA_TYPE_REGS = createDetails( JavaTypeRegistrations.class );
	AnnotationDescriptor<JavaTypeRegistration> JAVA_TYPE_REG = AnnotationDescriptorBuilder.createDetails( JavaTypeRegistration.class, JAVA_TYPE_REGS );
	AnnotationDescriptor<JdbcType> JDBC_TYPE = createDetails( JdbcType.class );
	AnnotationDescriptor<JdbcTypeCode> JDBC_TYPE_CODE = createDetails( JdbcTypeCode.class );
	AnnotationDescriptor<JdbcTypeRegistrations> JDBC_TYPE_REGS = createDetails( JdbcTypeRegistrations.class );
	AnnotationDescriptor<JdbcTypeRegistration> JDBC_TYPE_REG = AnnotationDescriptorBuilder.createDetails( JdbcTypeRegistration.class, JDBC_TYPE_REGS );
	AnnotationDescriptor<JoinColumnsOrFormulas> JOIN_COLUMNS_OR_FORMULAS = createDetails( JoinColumnsOrFormulas.class );
	AnnotationDescriptor<JoinColumnOrFormula> JOIN_COLUMN_OR_FORMULA = AnnotationDescriptorBuilder.createDetails( JoinColumnOrFormula.class, JOIN_COLUMNS_OR_FORMULAS );
	AnnotationDescriptor<JoinFormula> JOIN_FORMULA = createDetails( JoinFormula.class );
	AnnotationDescriptor<LazyCollection> LAZY_COLLECTION = createDetails( LazyCollection.class );
	AnnotationDescriptor<LazyGroup> LAZY_GROUP = createDetails( LazyGroup.class );
	AnnotationDescriptor<LazyToOne> LAZY_TO_ONE = createDetails( LazyToOne.class );
	AnnotationDescriptor<ListIndexBase> LIST_INDEX_BASE = createDetails( ListIndexBase.class );
	AnnotationDescriptor<ListIndexJavaType> LIST_INDEX_JAVA_TYPE = createDetails( ListIndexJavaType.class );
	AnnotationDescriptor<ListIndexJdbcType> LIST_INDEX_JDBC_TYPE = createDetails( ListIndexJdbcType.class );
	AnnotationDescriptor<ListIndexJdbcTypeCode> LIST_INDEX_JDBC_TYPE_CODE = createDetails( ListIndexJdbcTypeCode.class );
	AnnotationDescriptor<Loader> LOADER = createDetails( Loader.class );
	AnnotationDescriptor<ManyToAny> MANY_TO_ANY = createDetails( ManyToAny.class );
	AnnotationDescriptor<MapKeyCompositeType> MAP_KEY_COMPOSITE_TYPE = createDetails( MapKeyCompositeType.class );
	AnnotationDescriptor<MapKeyJavaType> MAP_KEY_JAVA_TYPE = createDetails( MapKeyJavaType.class );
	AnnotationDescriptor<MapKeyJdbcType> MAP_KEY_JDBC_TYPE = createDetails( MapKeyJdbcType.class );
	AnnotationDescriptor<MapKeyJdbcTypeCode> MAP_KEY_JDBC_TYPE_CODE = createDetails( MapKeyJdbcTypeCode.class );
	AnnotationDescriptor<MapKeyMutability> MAP_KEY_MUTABILITY = createDetails( MapKeyMutability.class );
	AnnotationDescriptor<MapKeyType> MAP_KEY_TYPE = createDetails( MapKeyType.class );
	AnnotationDescriptor<Mutability> MUTABILITY = createDetails( Mutability.class );
	AnnotationDescriptor<NamedNativeQueries> NAMED_NATIVE_QUERIES = createDetails( NamedNativeQueries.class );
	AnnotationDescriptor<NamedNativeQuery> NAMED_NATIVE_QUERY = AnnotationDescriptorBuilder.createDetails( NamedNativeQuery.class, NAMED_NATIVE_QUERIES );
	AnnotationDescriptor<NamedQueries> NAMED_QUERIES = createDetails( NamedQueries.class );
	AnnotationDescriptor<NamedQuery> NAMED_QUERY = AnnotationDescriptorBuilder.createDetails( NamedQuery.class, NAMED_QUERIES );
	AnnotationDescriptor<Nationalized> NATIONALIZED = createDetails( Nationalized.class );
	AnnotationDescriptor<NaturalId> NATURAL_ID = createDetails( NaturalId.class );
	AnnotationDescriptor<NaturalIdCache> NATURAL_ID_CACHE = createDetails( NaturalIdCache.class );
	AnnotationDescriptor<NotFound> NOT_FOUND = createDetails( NotFound.class );
	AnnotationDescriptor<OnDelete> ON_DELETE = createDetails( OnDelete.class );
	AnnotationDescriptor<OptimisticLock> OPTIMISTIC_LOCK = createDetails( OptimisticLock.class );
	AnnotationDescriptor<OptimisticLocking> OPTIMISTIC_LOCKING = createDetails( OptimisticLocking.class );
	AnnotationDescriptor<OrderBy> ORDER_BY = createDetails( OrderBy.class );
	AnnotationDescriptor<ParamDef> PARAM_DEF = createDetails( ParamDef.class );
	AnnotationDescriptor<Parameter> PARAMETER = createDetails( Parameter.class );
	AnnotationDescriptor<Parent> PARENT = createDetails( Parent.class );
	AnnotationDescriptor<PartitionKey> PARTITION_KEY = createDetails( PartitionKey.class );
	AnnotationDescriptor<Persister> PERSISTER = createDetails( Persister.class );
	AnnotationDescriptor<Polymorphism> POLYMORPHISM = createDetails( Polymorphism.class );
	AnnotationDescriptor<Proxy> PROXY = createDetails( Proxy.class );
	AnnotationDescriptor<RowId> ROW_ID = createDetails( RowId.class );
	AnnotationDescriptor<SecondaryRows> SECONDARY_ROWS = createDetails( SecondaryRows.class );
	AnnotationDescriptor<SecondaryRow> SECONDARY_ROW = AnnotationDescriptorBuilder.createDetails( SecondaryRow.class, SECONDARY_ROWS );
	AnnotationDescriptor<SelectBeforeUpdate> SELECT_BEFORE_UPDATE = createDetails( SelectBeforeUpdate.class );
	AnnotationDescriptor<SortComparator> SORT_COMPARATOR = createDetails( SortComparator.class );
	AnnotationDescriptor<SortNatural> SORT_NATURAL = createDetails( SortNatural.class );
	AnnotationDescriptor<Source> SOURCE = createDetails( Source.class );
	AnnotationDescriptor<SQLDeletes> SQL_DELETES = createDetails( SQLDeletes.class );
	AnnotationDescriptor<SQLDelete> SQL_DELETE = AnnotationDescriptorBuilder.createDetails( SQLDelete.class, SQL_DELETES );
	AnnotationDescriptor<SQLDeleteAll> SQL_DELETE_ALL = createDetails( SQLDeleteAll.class );
	AnnotationDescriptor<SqlFragmentAlias> SQL_FRAGMENT_ALIAS = createDetails( SqlFragmentAlias.class );
	AnnotationDescriptor<SQLInserts> SQL_INSERTS = createDetails( SQLInserts.class );
	AnnotationDescriptor<SQLInsert> SQL_INSERT = AnnotationDescriptorBuilder.createDetails( SQLInsert.class, SQL_INSERTS );
	AnnotationDescriptor<SQLUpdates> SQL_UPDATES = createDetails( SQLUpdates.class );
	AnnotationDescriptor<SQLUpdate> SQL_UPDATE = AnnotationDescriptorBuilder.createDetails( SQLUpdate.class, SQL_UPDATES );
	AnnotationDescriptor<Struct> STRUCT = createDetails( Struct.class );
	AnnotationDescriptor<Subselect> SUBSELECT = createDetails( Subselect.class );
	AnnotationDescriptor<Synchronize> SYNCHRONIZE = createDetails( Synchronize.class );
	AnnotationDescriptor<Tables> TABLES = createDetails( Tables.class );
	AnnotationDescriptor<Table> TABLE = AnnotationDescriptorBuilder.createDetails( Table.class, TABLES );
	AnnotationDescriptor<Target> TARGET = createDetails( Target.class );
	AnnotationDescriptor<TenantId> TENANT_ID = createDetails( TenantId.class );
	AnnotationDescriptor<TimeZoneColumn> TZ_COLUMN = createDetails( TimeZoneColumn.class );
	AnnotationDescriptor<TimeZoneStorage> TZ_STORAGE = createDetails( TimeZoneStorage.class );
	AnnotationDescriptor<Type> TYPE = createDetails( Type.class );
	AnnotationDescriptor<TypeBinderType> TYPE_BINDER_TYPE = createDetails( TypeBinderType.class );
	AnnotationDescriptor<TypeRegistrations> TYPE_REGS = createDetails( TypeRegistrations.class );
	AnnotationDescriptor<TypeRegistration> TYPE_REG = AnnotationDescriptorBuilder.createDetails( TypeRegistration.class, TYPE_REGS );
	AnnotationDescriptor<UpdateTimestamp> UPDATE_TIMESTAMP = createDetails( UpdateTimestamp.class );
	AnnotationDescriptor<UuidGenerator> UUID_GENERATOR = createDetails( UuidGenerator.class );
	AnnotationDescriptor<ValueGenerationType> VALUE_GENERATION_TYPE = createDetails( ValueGenerationType.class );
	AnnotationDescriptor<Where> WHERE = createDetails( Where.class );
	AnnotationDescriptor<WhereJoinTable> WHERE_JOIN_TABLE = createDetails( WhereJoinTable.class );


	AnnotationDescriptor<DialectOverride.Checks> DIALECT_OVERRIDE_CHECKS = createDetails( DialectOverride.Checks.class );
	AnnotationDescriptor<DialectOverride.Check> DIALECT_OVERRIDE_CHECK = AnnotationDescriptorBuilder.createDetails( DialectOverride.Check.class, DIALECT_OVERRIDE_CHECKS );
	AnnotationDescriptor<DialectOverride.OrderBys> DIALECT_OVERRIDE_ORDER_BYS = createDetails( DialectOverride.OrderBys.class );
	AnnotationDescriptor<DialectOverride.OrderBy> DIALECT_OVERRIDE_ORDER_BY = AnnotationDescriptorBuilder.createDetails( DialectOverride.OrderBy.class, DIALECT_OVERRIDE_ORDER_BYS );
	AnnotationDescriptor<DialectOverride.ColumnDefaults> DIALECT_OVERRIDE_COLUMN_DEFAULTS = createDetails( DialectOverride.ColumnDefaults.class );
	AnnotationDescriptor<DialectOverride.ColumnDefault> DIALECT_OVERRIDE_COLUMN_DEFAULT = AnnotationDescriptorBuilder.createDetails( DialectOverride.ColumnDefault.class, DIALECT_OVERRIDE_COLUMN_DEFAULTS );
	AnnotationDescriptor<DialectOverride.GeneratedColumns> DIALECT_OVERRIDE_GENERATED_COLUMNS = createDetails( DialectOverride.GeneratedColumns.class );
	AnnotationDescriptor<DialectOverride.GeneratedColumn> DIALECT_OVERRIDE_GENERATED_COLUMN = AnnotationDescriptorBuilder.createDetails( DialectOverride.GeneratedColumn.class, DIALECT_OVERRIDE_GENERATED_COLUMNS );
	AnnotationDescriptor<DialectOverride.DiscriminatorFormulas> DIALECT_OVERRIDE_DISCRIMINATOR_FORMULAS = createDetails( DialectOverride.DiscriminatorFormulas.class );
	AnnotationDescriptor<DialectOverride.DiscriminatorFormula> DIALECT_OVERRIDE_DISCRIMINATOR_FORMULA = AnnotationDescriptorBuilder.createDetails( DialectOverride.DiscriminatorFormula.class, DIALECT_OVERRIDE_DISCRIMINATOR_FORMULAS );
	AnnotationDescriptor<DialectOverride.Formulas> DIALECT_OVERRIDE_FORMULAS = createDetails( DialectOverride.Formulas.class );
	AnnotationDescriptor<DialectOverride.Formula> DIALECT_OVERRIDE_FORMULA = AnnotationDescriptorBuilder.createDetails( DialectOverride.Formula.class, DIALECT_OVERRIDE_FORMULAS );
	AnnotationDescriptor<DialectOverride.JoinFormulas> DIALECT_OVERRIDE_JOIN_FORMULAS = createDetails( DialectOverride.JoinFormulas.class );
	AnnotationDescriptor<DialectOverride.JoinFormula> DIALECT_OVERRIDE_JOIN_FORMULA = AnnotationDescriptorBuilder.createDetails( DialectOverride.JoinFormula.class, DIALECT_OVERRIDE_JOIN_FORMULAS );
	AnnotationDescriptor<DialectOverride.Wheres> DIALECT_OVERRIDE_WHERES = createDetails( DialectOverride.Wheres.class );
	AnnotationDescriptor<DialectOverride.Where> DIALECT_OVERRIDE_WHERE = AnnotationDescriptorBuilder.createDetails( DialectOverride.Where.class, DIALECT_OVERRIDE_WHERES );
	AnnotationDescriptor<DialectOverride.FilterOverrides> DIALECT_OVERRIDE_FILTER_OVERRIDES = createDetails( DialectOverride.FilterOverrides.class );
	AnnotationDescriptor<DialectOverride.Filters> DIALECT_OVERRIDE_FILTERS = AnnotationDescriptorBuilder.createDetails( DialectOverride.Filters.class, DIALECT_OVERRIDE_FILTER_OVERRIDES );
	AnnotationDescriptor<DialectOverride.FilterDefOverrides> DIALECT_OVERRIDE_FILTER_DEF_OVERRIDES = createDetails( DialectOverride.FilterDefOverrides.class );
	AnnotationDescriptor<DialectOverride.FilterDefs> DIALECT_OVERRIDE_FILTER_DEFS = AnnotationDescriptorBuilder.createDetails( DialectOverride.FilterDefs.class, DIALECT_OVERRIDE_FILTER_DEF_OVERRIDES );
	AnnotationDescriptor<DialectOverride.Version> DIALECT_OVERRIDE_VERSION = createDetails( DialectOverride.Version.class );

	/**
	 * Consume each defined AnnotationDescriptor.
	 */
	static void forEachAnnotation(Consumer<AnnotationDescriptor<?>> consumer) {
		consumer.accept( ANY );
		consumer.accept( ANY_DISCRIMINATOR );
		consumer.accept( ANY_DISCRIMINATOR_VALUES );
		consumer.accept( ANY_DISCRIMINATOR_VALUE );
		consumer.accept( ANY_KEY_JAVA_CLASS );
		consumer.accept( ANY_KEY_JAVA_TYPE );
		consumer.accept( ANY_KEY_JDBC_TYPE );
		consumer.accept( ANY_KEY_JDBC_TYPE_CODE );
		consumer.accept( ATTRIBUTE_ACCESSOR );
		consumer.accept( ATTRIBUTE_BINDER_TYPE );
		consumer.accept( BAG );
		consumer.accept( BATCH_SIZE );
		consumer.accept( CACHE );
		consumer.accept( CASCADE );
		consumer.accept( CHECKS );
		consumer.accept( CHECK );
		consumer.accept( COLLECTION_ID );
		consumer.accept( COLLECTION_ID_JAVA_TYPE );
		consumer.accept( COLLECTION_ID_JDBC_TYPE );
		consumer.accept( COLLECTION_ID_JDBC_TYPE_CODE );
		consumer.accept( COLLECTION_ID_MUTABILITY );
		consumer.accept( COLLECTION_ID_TYPE );
		consumer.accept( COLLECTION_TYPE );
		consumer.accept( COLLECTION_TYPE_REGS );
		consumer.accept( COLLECTION_TYPE_REG );
		consumer.accept( COLUMN_DEFAULT );
		consumer.accept( COLUMN_TRANSFORMERS );
		consumer.accept( COLUMN_TRANSFORMER );
		consumer.accept( COMMENT );
		consumer.accept( COMPOSITE_TYPE );
		consumer.accept( COMPOSITE_TYPE_REGS );
		consumer.accept( COMPOSITE_TYPE_REG );
		consumer.accept( CONVERTER_REGS );
		consumer.accept( CONVERTER_REG );
		consumer.accept( CREATION_TIMESTAMP );
		consumer.accept( CURRENT_TIMESTAMP );
		consumer.accept( DISCRIMINATOR_FORMULA );
		consumer.accept( DISCRIMINATOR_OPTIONS );
		consumer.accept( DYNAMIC_INSERT );
		consumer.accept( DYNAMIC_UPDATE );
		consumer.accept( EMBEDDABLE_INSTANTIATOR );
		consumer.accept( EMBEDDABLE_INSTANTIATOR_REGS );
		consumer.accept( EMBEDDABLE_INSTANTIATOR_REG );
		consumer.accept( FETCH );
		consumer.accept( FETCH_PROFILES );
		consumer.accept( FETCH_PROFILE );
		consumer.accept( FILTER );
		consumer.accept( FILTERS );
		consumer.accept( FILTER_DEFS );
		consumer.accept( FILTER_DEF );
		consumer.accept( FILTER_JOIN_TABLES );
		consumer.accept( FILTER_JOIN_TABLE );
		consumer.accept( FOREIGN_KEY );
		consumer.accept( FORMULA );
		consumer.accept( GENERATED );
		consumer.accept( GENERATED_COLUMN );
		consumer.accept( GENERATOR_TYPE );
		consumer.accept( GENERIC_GENERATORS );
		consumer.accept( GENERIC_GENERATOR );
		consumer.accept( ID_GENERATOR_TYPE );
		consumer.accept( IMMUTABLE );
		consumer.accept( IMPORTED );
		consumer.accept( INDEX );
		consumer.accept( INDEX_COLUMN );
		consumer.accept( INSTANTIATOR );
		consumer.accept( JAVA_TYPE );
		consumer.accept( JAVA_TYPE_REGS );
		consumer.accept( JAVA_TYPE_REG );
		consumer.accept( JDBC_TYPE );
		consumer.accept( JDBC_TYPE_CODE );
		consumer.accept( JDBC_TYPE_REGS );
		consumer.accept( JDBC_TYPE_REG );
		consumer.accept( JOIN_COLUMNS_OR_FORMULAS );
		consumer.accept( JOIN_COLUMN_OR_FORMULA );
		consumer.accept( JOIN_FORMULA );
		consumer.accept( LAZY_COLLECTION );
		consumer.accept( LAZY_GROUP );
		consumer.accept( LAZY_TO_ONE );
		consumer.accept( LIST_INDEX_BASE );
		consumer.accept( LIST_INDEX_JAVA_TYPE );
		consumer.accept( LIST_INDEX_JDBC_TYPE );
		consumer.accept( LIST_INDEX_JDBC_TYPE_CODE );
		consumer.accept( LOADER );
		consumer.accept( MANY_TO_ANY );
		consumer.accept( MAP_KEY_COMPOSITE_TYPE );
		consumer.accept( MAP_KEY_JAVA_TYPE );
		consumer.accept( MAP_KEY_JDBC_TYPE );
		consumer.accept( MAP_KEY_JDBC_TYPE_CODE );
		consumer.accept( MAP_KEY_MUTABILITY );
		consumer.accept( MAP_KEY_TYPE );
		consumer.accept( MUTABILITY );
		consumer.accept( NAMED_NATIVE_QUERIES );
		consumer.accept( NAMED_NATIVE_QUERY );
		consumer.accept( NAMED_QUERIES );
		consumer.accept( NAMED_QUERY );
		consumer.accept( NATIONALIZED );
		consumer.accept( NATURAL_ID );
		consumer.accept( NATURAL_ID_CACHE );
		consumer.accept( NOT_FOUND );
		consumer.accept( ON_DELETE );
		consumer.accept( OPTIMISTIC_LOCK );
		consumer.accept( OPTIMISTIC_LOCKING );
		consumer.accept( ORDER_BY );
		consumer.accept( PARAM_DEF );
		consumer.accept( PARAMETER );
		consumer.accept( PARENT );
		consumer.accept( PARTITION_KEY );
		consumer.accept( PERSISTER );
		consumer.accept( POLYMORPHISM );
		consumer.accept( PROXY );
		consumer.accept( ROW_ID );
		consumer.accept( SECONDARY_ROWS );
		consumer.accept( SECONDARY_ROW );
		consumer.accept( SELECT_BEFORE_UPDATE );
		consumer.accept( SORT_COMPARATOR );
		consumer.accept( SORT_NATURAL );
		consumer.accept( SOURCE );
		consumer.accept( SQL_DELETE_ALL );
		consumer.accept( SQL_DELETES );
		consumer.accept( SQL_DELETE );
		consumer.accept( SQL_FRAGMENT_ALIAS );
		consumer.accept( SQL_INSERTS );
		consumer.accept( SQL_INSERT );
		consumer.accept( SQL_UPDATES );
		consumer.accept( SQL_UPDATE );
		consumer.accept( STRUCT );
		consumer.accept( SUBSELECT );
		consumer.accept( SYNCHRONIZE );
		consumer.accept( TABLES );
		consumer.accept( TABLE );
		consumer.accept( TARGET );
		consumer.accept( TENANT_ID );
		consumer.accept( TZ_COLUMN );
		consumer.accept( TZ_STORAGE );
		consumer.accept( TYPE );
		consumer.accept( TYPE_BINDER_TYPE );
		consumer.accept( TYPE_REGS );
		consumer.accept( TYPE_REG );
		consumer.accept( UPDATE_TIMESTAMP );
		consumer.accept( UUID_GENERATOR );
		consumer.accept( VALUE_GENERATION_TYPE );
		consumer.accept( WHERE );
		consumer.accept( WHERE_JOIN_TABLE );

		consumer.accept( DIALECT_OVERRIDE_CHECKS );
		consumer.accept( DIALECT_OVERRIDE_CHECK );
		consumer.accept( DIALECT_OVERRIDE_ORDER_BYS );
		consumer.accept( DIALECT_OVERRIDE_ORDER_BY );
		consumer.accept( DIALECT_OVERRIDE_COLUMN_DEFAULTS );
		consumer.accept( DIALECT_OVERRIDE_COLUMN_DEFAULT );
		consumer.accept( DIALECT_OVERRIDE_GENERATED_COLUMNS );
		consumer.accept( DIALECT_OVERRIDE_GENERATED_COLUMN );
		consumer.accept( DIALECT_OVERRIDE_DISCRIMINATOR_FORMULAS );
		consumer.accept( DIALECT_OVERRIDE_DISCRIMINATOR_FORMULA );
		consumer.accept( DIALECT_OVERRIDE_FORMULAS );
		consumer.accept( DIALECT_OVERRIDE_FORMULA );
		consumer.accept( DIALECT_OVERRIDE_JOIN_FORMULAS );
		consumer.accept( DIALECT_OVERRIDE_JOIN_FORMULA );
		consumer.accept( DIALECT_OVERRIDE_WHERES );
		consumer.accept( DIALECT_OVERRIDE_WHERE );
		consumer.accept( DIALECT_OVERRIDE_FILTER_OVERRIDES );
		consumer.accept( DIALECT_OVERRIDE_FILTERS );
		consumer.accept( DIALECT_OVERRIDE_FILTER_DEF_OVERRIDES );
		consumer.accept( DIALECT_OVERRIDE_FILTER_DEFS );
		consumer.accept( DIALECT_OVERRIDE_VERSION );
	}
}
