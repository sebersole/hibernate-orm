/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html.
 */
package org.hibernate.boot.jandex.spi;

import java.util.function.Consumer;

import jakarta.persistence.Access;
import jakarta.persistence.AssociationOverride;
import jakarta.persistence.AssociationOverrides;
import jakarta.persistence.AttributeOverride;
import jakarta.persistence.AttributeOverrides;
import jakarta.persistence.Basic;
import jakarta.persistence.Cacheable;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ColumnResult;
import jakarta.persistence.Convert;
import jakarta.persistence.Converter;
import jakarta.persistence.Converts;
import jakarta.persistence.DiscriminatorColumn;
import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Embeddable;
import jakarta.persistence.Embedded;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.EntityResult;
import jakarta.persistence.Enumerated;
import jakarta.persistence.ExcludeDefaultListeners;
import jakarta.persistence.ExcludeSuperclassListeners;
import jakarta.persistence.FieldResult;
import jakarta.persistence.ForeignKey;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Index;
import jakarta.persistence.Inheritance;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinColumns;
import jakarta.persistence.JoinTable;
import jakarta.persistence.Lob;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.MapKey;
import jakarta.persistence.MapKeyClass;
import jakarta.persistence.MapKeyColumn;
import jakarta.persistence.MapKeyEnumerated;
import jakarta.persistence.MapKeyJoinColumn;
import jakarta.persistence.MapKeyJoinColumns;
import jakarta.persistence.MapKeyTemporal;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.MapsId;
import jakarta.persistence.NamedAttributeNode;
import jakarta.persistence.NamedEntityGraph;
import jakarta.persistence.NamedEntityGraphs;
import jakarta.persistence.NamedNativeQueries;
import jakarta.persistence.NamedNativeQuery;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.NamedStoredProcedureQueries;
import jakarta.persistence.NamedStoredProcedureQuery;
import jakarta.persistence.NamedSubgraph;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.OrderBy;
import jakarta.persistence.OrderColumn;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.PersistenceContexts;
import jakarta.persistence.PersistenceProperty;
import jakarta.persistence.PersistenceUnit;
import jakarta.persistence.PersistenceUnits;
import jakarta.persistence.PostLoad;
import jakarta.persistence.PostPersist;
import jakarta.persistence.PostRemove;
import jakarta.persistence.PostUpdate;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreRemove;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.PrimaryKeyJoinColumns;
import jakarta.persistence.QueryHint;
import jakarta.persistence.SecondaryTable;
import jakarta.persistence.SecondaryTables;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.SequenceGenerators;
import jakarta.persistence.SqlResultSetMapping;
import jakarta.persistence.SqlResultSetMappings;
import jakarta.persistence.StoredProcedureParameter;
import jakarta.persistence.Table;
import jakarta.persistence.TableGenerator;
import jakarta.persistence.TableGenerators;
import jakarta.persistence.Temporal;
import jakarta.persistence.Transient;
import jakarta.persistence.UniqueConstraint;
import jakarta.persistence.Version;

import static org.hibernate.boot.jandex.spi.AnnotationDetails.createDetails;

/**
 * Details about JPA annotations
 *
 * @author Steve Ebersole
 */
public interface JpaAnnotations {
	// todo (jandex) : inner/nested annotations?

	AnnotationDetails ACCESS = createDetails( Access.class );
	AnnotationDetails ASSOCIATION_OVERRIDES = createDetails( AssociationOverrides.class );
	AnnotationDetails ASSOCIATION_OVERRIDE = createDetails( AssociationOverride.class, ASSOCIATION_OVERRIDES );
	AnnotationDetails ATTRIBUTE_OVERRIDES = createDetails( AttributeOverrides.class );
	AnnotationDetails ATTRIBUTE_OVERRIDE = createDetails( AttributeOverride.class, ATTRIBUTE_OVERRIDES );
	AnnotationDetails BASIC = createDetails( Basic.class );
	AnnotationDetails CACHEABLE = createDetails( Cacheable.class );
	AnnotationDetails COLLECTION_TABLE = createDetails( CollectionTable.class );
	AnnotationDetails COLUMN = createDetails( Column.class );
	AnnotationDetails COLUMN_RESULT = createDetails( ColumnResult.class );
	AnnotationDetails CONVERTS = createDetails( Converts.class );
	AnnotationDetails CONVERT = createDetails( Convert.class, CONVERTS );
	AnnotationDetails CONVERTER = createDetails( Converter.class );
	AnnotationDetails DISCRIMINATOR_COLUMN = createDetails( DiscriminatorColumn.class );
	AnnotationDetails DISCRIMINATOR_VALUE = createDetails( DiscriminatorValue.class );
	AnnotationDetails ELEMENT_COLLECTION = createDetails( ElementCollection.class );
	AnnotationDetails EMBEDDABLE = createDetails( Embeddable.class );
	AnnotationDetails EMBEDDED = createDetails( Embedded.class );
	AnnotationDetails EMBEDDED_ID = createDetails( EmbeddedId.class );
	AnnotationDetails ENTITY = createDetails( Entity.class );
	AnnotationDetails ENTITY_LISTENERS = createDetails( EntityListeners.class );
	AnnotationDetails ENTITY_RESULT = createDetails( EntityResult.class );
	AnnotationDetails ENUMERATED = createDetails( Enumerated.class );
	AnnotationDetails EXCLUDE_DEFAULT_LISTENERS = createDetails( ExcludeDefaultListeners.class );
	AnnotationDetails EXCLUDE_SUPERCLASS_LISTENERS = createDetails( ExcludeSuperclassListeners.class );
	AnnotationDetails FIELD_RESULT = createDetails( FieldResult.class );
	AnnotationDetails FOREIGN_KEY = createDetails( ForeignKey.class );
	AnnotationDetails GENERATED_VALUE = createDetails( GeneratedValue.class );
	AnnotationDetails ID = createDetails( Id.class );
	AnnotationDetails ID_CLASS = createDetails( IdClass.class );
	AnnotationDetails INDEX = createDetails( Index.class );
	AnnotationDetails INHERITANCE = createDetails( Inheritance.class );
	AnnotationDetails JOIN_COLUMNS = createDetails( JoinColumns.class );
	AnnotationDetails JOIN_COLUMN = createDetails( JoinColumn.class, JOIN_COLUMNS );
	AnnotationDetails JOIN_TABLE = createDetails( JoinTable.class );
	AnnotationDetails LOB = createDetails( Lob.class );
	AnnotationDetails MANY_TO_MANY = createDetails( ManyToMany.class );
	AnnotationDetails MANY_TO_ONE = createDetails( ManyToOne.class );
	AnnotationDetails MAP_KEY = createDetails( MapKey.class );
	AnnotationDetails MAP_KEY_CLASS = createDetails( MapKeyClass.class );
	AnnotationDetails MAP_KEY_COLUMN = createDetails( MapKeyColumn.class );
	AnnotationDetails MAP_KEY_ENUMERATED = createDetails( MapKeyEnumerated.class );
	AnnotationDetails MAP_KEY_JOIN_COLUMNS = createDetails( MapKeyJoinColumns.class );
	AnnotationDetails MAP_KEY_JOIN_COLUMN = createDetails( MapKeyJoinColumn.class, MAP_KEY_JOIN_COLUMNS );
	AnnotationDetails MAP_KEY_TEMPORAL = createDetails( MapKeyTemporal.class );
	AnnotationDetails MAPPED_SUPERCLASS = createDetails( MappedSuperclass.class );
	AnnotationDetails MAPS_ID = createDetails( MapsId.class );
	AnnotationDetails NAMED_ATTRIBUTE_NODE = createDetails( NamedAttributeNode.class );
	AnnotationDetails NAMED_ENTITY_GRAPHS = createDetails( NamedEntityGraphs.class );
	AnnotationDetails NAMED_ENTITY_GRAPH = createDetails( NamedEntityGraph.class, NAMED_ENTITY_GRAPHS );
	AnnotationDetails NAMED_NATIVE_QUERIES = createDetails( NamedNativeQueries.class );
	AnnotationDetails NAMED_NATIVE_QUERY = createDetails( NamedNativeQuery.class, NAMED_NATIVE_QUERIES );
	AnnotationDetails NAMED_QUERIES = createDetails( NamedQueries.class );
	AnnotationDetails NAMED_QUERY = createDetails( NamedQuery.class, NAMED_QUERIES );
	AnnotationDetails NAMED_STORED_PROCEDURE_QUERIES = createDetails( NamedStoredProcedureQueries.class );
	AnnotationDetails NAMED_STORED_PROCEDURE_QUERY = createDetails( NamedStoredProcedureQuery.class, NAMED_STORED_PROCEDURE_QUERIES );
	AnnotationDetails NAMED_SUB_GRAPH = createDetails( NamedSubgraph.class );
	AnnotationDetails ONE_TO_MANY = createDetails( OneToMany.class );
	AnnotationDetails ONE_TO_ONE = createDetails( OneToOne.class );
	AnnotationDetails ORDER_BY = createDetails( OrderBy.class );
	AnnotationDetails ORDER_COLUMN = createDetails( OrderColumn.class );
	AnnotationDetails PERSISTENCE_CONTEXTS = createDetails( PersistenceContexts.class );
	AnnotationDetails PERSISTENCE_CONTEXT = createDetails( PersistenceContext.class, PERSISTENCE_CONTEXTS );
	AnnotationDetails PERSISTENCE_PROPERTY = createDetails( PersistenceProperty.class );
	AnnotationDetails PERSISTENCE_UNITS = createDetails( PersistenceUnits.class );
	AnnotationDetails PERSISTENCE_UNIT = createDetails( PersistenceUnit.class, PERSISTENCE_UNITS );
	AnnotationDetails POST_LOAD = createDetails( PostLoad.class );
	AnnotationDetails POST_PERSIST = createDetails( PostPersist.class );
	AnnotationDetails POST_REMOVE = createDetails( PostRemove.class );
	AnnotationDetails POST_UPDATE = createDetails( PostUpdate.class );
	AnnotationDetails PRE_PERSIST = createDetails( PrePersist.class );
	AnnotationDetails PRE_REMOVE = createDetails( PreRemove.class );
	AnnotationDetails PRE_UPDATE = createDetails( PreUpdate.class );
	AnnotationDetails PRIMARY_KEY_JOIN_COLUMNS = createDetails( PrimaryKeyJoinColumns.class );
	AnnotationDetails PRIMARY_KEY_JOIN_COLUMN = createDetails( PrimaryKeyJoinColumn.class, PRIMARY_KEY_JOIN_COLUMNS );
	AnnotationDetails QUERY_HINT = createDetails( QueryHint.class );
	AnnotationDetails SECONDARY_TABLES = createDetails( SecondaryTables.class );
	AnnotationDetails SECONDARY_TABLE = createDetails( SecondaryTable.class, SECONDARY_TABLES );
	AnnotationDetails SEQUENCE_GENERATORS = createDetails( SequenceGenerators.class );
	AnnotationDetails SEQUENCE_GENERATOR = createDetails( SequenceGenerator.class, SEQUENCE_GENERATORS );
	AnnotationDetails SQL_RESULT_SET_MAPPINGS = createDetails( SqlResultSetMappings.class );
	AnnotationDetails SQL_RESULT_SET_MAPPING = createDetails( SqlResultSetMapping.class, SQL_RESULT_SET_MAPPINGS );
	AnnotationDetails STORED_PROCEDURE_PARAMETER = createDetails( StoredProcedureParameter.class );
	AnnotationDetails TABLE = createDetails( Table.class );
	AnnotationDetails TABLE_GENERATORS = createDetails( TableGenerators.class );
	AnnotationDetails TABLE_GENERATOR = createDetails( TableGenerator.class, TABLE_GENERATORS );
	AnnotationDetails TEMPORAL = createDetails( Temporal.class );
	AnnotationDetails TRANSIENT = createDetails( Transient.class );
	AnnotationDetails UNIQUE_CONSTRAINT = createDetails( UniqueConstraint.class );
	AnnotationDetails VERSION = createDetails( Version.class );

	/**
	 * Consume each defined AnnotationDetails
	 */
	static void forEachAnnotation(Consumer<AnnotationDetails> consumer) {
		consumer.accept( ACCESS );
		consumer.accept( ASSOCIATION_OVERRIDES );
		consumer.accept( ASSOCIATION_OVERRIDE );
		consumer.accept( ATTRIBUTE_OVERRIDES );
		consumer.accept( ATTRIBUTE_OVERRIDE );
		consumer.accept( BASIC );
		consumer.accept( CACHEABLE );
		consumer.accept( COLLECTION_TABLE );
		consumer.accept( COLUMN );
		consumer.accept( COLUMN_RESULT );
		consumer.accept( CONVERTS );
		consumer.accept( CONVERT );
		consumer.accept( CONVERTER );
		consumer.accept( DISCRIMINATOR_COLUMN );
		consumer.accept( DISCRIMINATOR_VALUE );
		consumer.accept( ELEMENT_COLLECTION );
		consumer.accept( EMBEDDABLE );
		consumer.accept( EMBEDDED );
		consumer.accept( EMBEDDED_ID );
		consumer.accept( ENTITY );
		consumer.accept( ENTITY_LISTENERS );
		consumer.accept( ENTITY_RESULT );
		consumer.accept( ENUMERATED );
		consumer.accept( EXCLUDE_DEFAULT_LISTENERS );
		consumer.accept( EXCLUDE_SUPERCLASS_LISTENERS );
		consumer.accept( FIELD_RESULT );
		consumer.accept( FOREIGN_KEY );
		consumer.accept( GENERATED_VALUE );
		consumer.accept( ID );
		consumer.accept( ID_CLASS );
		consumer.accept( INDEX );
		consumer.accept( INHERITANCE );
		consumer.accept( JOIN_COLUMNS );
		consumer.accept( JOIN_COLUMN );
		consumer.accept( JOIN_TABLE );
		consumer.accept( LOB );
		consumer.accept( MANY_TO_MANY );
		consumer.accept( MANY_TO_ONE );
		consumer.accept( MAP_KEY );
		consumer.accept( MAP_KEY_CLASS );
		consumer.accept( MAP_KEY_COLUMN );
		consumer.accept( MAP_KEY_ENUMERATED );
		consumer.accept( MAP_KEY_JOIN_COLUMNS );
		consumer.accept( MAP_KEY_JOIN_COLUMN );
		consumer.accept( MAP_KEY_TEMPORAL );
		consumer.accept( MAPPED_SUPERCLASS );
		consumer.accept( MAPS_ID );
		consumer.accept( NAMED_ATTRIBUTE_NODE );
		consumer.accept( NAMED_ENTITY_GRAPHS );
		consumer.accept( NAMED_ENTITY_GRAPH );
		consumer.accept( NAMED_NATIVE_QUERIES );
		consumer.accept( NAMED_NATIVE_QUERY );
		consumer.accept( NAMED_QUERIES );
		consumer.accept( NAMED_QUERY );
		consumer.accept( NAMED_STORED_PROCEDURE_QUERIES );
		consumer.accept( NAMED_STORED_PROCEDURE_QUERY );
		consumer.accept( NAMED_SUB_GRAPH );
		consumer.accept( ONE_TO_MANY );
		consumer.accept( ONE_TO_ONE );
		consumer.accept( ORDER_BY );
		consumer.accept( ORDER_COLUMN );
		consumer.accept( PERSISTENCE_CONTEXTS );
		consumer.accept( PERSISTENCE_CONTEXT );
		consumer.accept( PERSISTENCE_PROPERTY );
		consumer.accept( PERSISTENCE_UNITS );
		consumer.accept( PERSISTENCE_UNIT );
		consumer.accept( POST_LOAD );
		consumer.accept( POST_PERSIST );
		consumer.accept( POST_REMOVE );
		consumer.accept( POST_UPDATE );
		consumer.accept( PRE_PERSIST );
		consumer.accept( PRE_REMOVE );
		consumer.accept( PRE_UPDATE );
		consumer.accept( PRIMARY_KEY_JOIN_COLUMNS );
		consumer.accept( PRIMARY_KEY_JOIN_COLUMN );
		consumer.accept( QUERY_HINT );
		consumer.accept( SECONDARY_TABLES );
		consumer.accept( SECONDARY_TABLE );
		consumer.accept( SEQUENCE_GENERATORS );
		consumer.accept( SEQUENCE_GENERATOR );
		consumer.accept( SQL_RESULT_SET_MAPPINGS );
		consumer.accept( SQL_RESULT_SET_MAPPING );
		consumer.accept( STORED_PROCEDURE_PARAMETER );
		consumer.accept( TABLE );
		consumer.accept( TABLE_GENERATORS );
		consumer.accept( TABLE_GENERATOR );
		consumer.accept( TEMPORAL );
		consumer.accept( TRANSIENT );
		consumer.accept( UNIQUE_CONSTRAINT );
		consumer.accept( VERSION );
	}
}
